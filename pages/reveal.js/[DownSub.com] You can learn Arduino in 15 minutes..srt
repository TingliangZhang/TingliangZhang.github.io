1
00:00:00,310 --> 00:00:01,460
Arduinos!

2
00:00:01,460 --> 00:00:05,509
I'm going to talk about what they are, what
they can do, and the basics of how to set

3
00:00:05,509 --> 00:00:10,830
one up to do simple things like make an LED
dimming circuit, control the speed of motors,

4
00:00:10,830 --> 00:00:13,920
and even make a simple oscilloscope.

5
00:00:13,920 --> 00:00:15,650
So what is an Arduino?

6
00:00:15,650 --> 00:00:19,679
I'm sure you've heard about these things a
million times by now, and if you are confused

7
00:00:19,679 --> 00:00:24,829
you have every right to be, because the word
Arduino refers to so many different things.

8
00:00:24,829 --> 00:00:28,199
Keep watching and I will explain all of them.

9
00:00:28,199 --> 00:00:31,960
Microcontrollers are integrated circuits that
are basically tiny computers.

10
00:00:31,960 --> 00:00:34,530
They can run small, simple software programs.

11
00:00:34,530 --> 00:00:38,680
They are low powered enough that they can
be powered by a battery for days, but they

12
00:00:38,680 --> 00:00:43,600
are fast enough to process data much faster
than any human being can think.

13
00:00:43,600 --> 00:00:47,980
Arduino is a company in Italy that designs
and sells circuit boards that make microcontrollers

14
00:00:47,980 --> 00:00:49,500
easy to use.

15
00:00:49,500 --> 00:00:54,260
They call these circuit boards Arduinos, and
there are a lot of different types of Arduinos!

16
00:00:54,260 --> 00:00:58,920
For example, you've got simple Arduino boards
like the Arduino Uno, which is cheap and good

17
00:00:58,920 --> 00:01:00,830
enough for most projects.

18
00:01:00,830 --> 00:01:05,560
You could use an Arduino Uno to control motors,
lighting, cameras, or even build a simple

19
00:01:05,560 --> 00:01:07,880
robot.

20
00:01:07,880 --> 00:01:12,340
And then you have more fancy Arduinos with
more powerful processors which have wifi,

21
00:01:12,340 --> 00:01:13,850
ethernet and more.

22
00:01:13,850 --> 00:01:18,399
The company Arduino open sources all of their
hardware designs, which means that you don't

23
00:01:18,399 --> 00:01:23,009
just have to buy from them, there are countless
3rd party companies that make their own variants

24
00:01:23,009 --> 00:01:25,359
of the Arduino hardware designs.

25
00:01:25,359 --> 00:01:28,950
They can't call them Arduinos, but functionally
they are the same thing.

26
00:01:28,950 --> 00:01:34,179
There are also these things called Arduino
"shields", which are basically circuit boards

27
00:01:34,179 --> 00:01:38,619
that plug into your main Arduino circuit board,
and let you do more stuff.

28
00:01:38,619 --> 00:01:43,069
For example, Adafruit makes shields that let
you control motors and servos, without having

29
00:01:43,069 --> 00:01:45,649
to design motor control circuitry.

30
00:01:45,649 --> 00:01:49,659
And Sparkfun have shields that let you turn
your Arduino into a simple cell phone, or

31
00:01:49,659 --> 00:01:51,389
an MP3 player!

32
00:01:51,389 --> 00:01:56,509
Okay, so that was a quick overview of Arduino
the company, and Arduino hardware.

33
00:01:56,509 --> 00:01:57,780
But there's more!

34
00:01:57,780 --> 00:02:02,509
There's also the Arduino software development
environment, and this is what makes Arduino

35
00:02:02,509 --> 00:02:04,039
good for beginners.

36
00:02:04,039 --> 00:02:09,318
Historically, if you wanted to program microcontrollers,
you'd have to type out a lot of binary and

37
00:02:09,318 --> 00:02:12,959
memorize a lot of hard to remember registers
and instructions.

38
00:02:12,959 --> 00:02:17,160
Then you'd have to use special programming
hardware with custom made cables to upload

39
00:02:17,160 --> 00:02:19,549
your program onto your microcontroller.

40
00:02:19,549 --> 00:02:22,510
Arduino, the company, got rid of all of that.

41
00:02:22,510 --> 00:02:26,680
They created software that works on Windows,
Mac, and Linux, which makes uploading your

42
00:02:26,680 --> 00:02:30,650
code as simple as connecting a USB cable and
clicking a button.

43
00:02:30,650 --> 00:02:34,700
They created a programming language that lets
you configure all of the Arduino hardware

44
00:02:34,700 --> 00:02:36,930
products in the same way.

45
00:02:36,930 --> 00:02:40,890
And although it's not as simple as learning
Python, the Arduino software is one of the

46
00:02:40,890 --> 00:02:44,689
easiest programming experiences you'll ever
have.

47
00:02:44,689 --> 00:02:50,150
Ok, so hopefully that clarifies what Arduino
means in different contexts.

48
00:02:50,150 --> 00:02:54,750
Now when people say they used "an Arduino"
for their project, they are probably talking

49
00:02:54,750 --> 00:02:56,700
about the Arduino Uno.

50
00:02:56,700 --> 00:03:01,019
It's highly unlikely that you will outgrow
one any time soon, so it's the perfect Arduino

51
00:03:01,019 --> 00:03:03,250
hardware for this beginners tutorial.

52
00:03:03,250 --> 00:03:07,510
You can get them from Amazon cheaply, and
if you have the money I recommend buying one

53
00:03:07,510 --> 00:03:11,849
of the many Uno kits out there where you get
a lot of different pieces of hardware to play

54
00:03:11,849 --> 00:03:12,849
with.

55
00:03:12,849 --> 00:03:15,120
Okay, so you've got your Arduino Uno.

56
00:03:15,120 --> 00:03:18,069
The first thing I want to do is get you familiar
with the hardware.

57
00:03:18,069 --> 00:03:24,409
You will often hear Arduinos being called
microcontrollers, and that's technically incorrect.

58
00:03:24,409 --> 00:03:28,850
Arduinos are circuit boards that have microcontroller
chips on them, but they also have a lot of

59
00:03:28,850 --> 00:03:30,609
other stuff on there too.

60
00:03:30,609 --> 00:03:33,430
Let's take a quick tour.

61
00:03:33,430 --> 00:03:35,720
This is the microcontroller.

62
00:03:35,720 --> 00:03:39,200
Arduino UNOs use a series of microcontrollers
called ATMEGA AVRs.

63
00:03:39,200 --> 00:03:42,430
They are made by a company called Atmel.

64
00:03:42,430 --> 00:03:46,260
You can buy just the bare chips on their own
for about a dollar but then you'd have to

65
00:03:46,260 --> 00:03:48,269
do a lot of soldering.

66
00:03:48,269 --> 00:03:51,150
Connected to the microcontroller is a crystal
resonator.

67
00:03:51,150 --> 00:03:54,060
This controls how fast the microcontroller
is running.

68
00:03:54,060 --> 00:03:59,049
I have a separate tutorial on resonators and
oscillators which you might find useful.

69
00:03:59,049 --> 00:04:03,590
Now in order to upload the software you create
to the main microcontroller, there's actually

70
00:04:03,590 --> 00:04:05,640
another microcontroller!

71
00:04:05,640 --> 00:04:10,140
This chip is what lets you connect your USB
cable to the Arduino board, and communicate

72
00:04:10,140 --> 00:04:11,690
via USB.

73
00:04:11,690 --> 00:04:15,690
It lets you upload your programs onto the
main microcontroller, and once you have your

74
00:04:15,690 --> 00:04:19,970
program running, this chip is what allows
you to send messages back and forth between

75
00:04:19,970 --> 00:04:22,029
your computer and your Arduino.

76
00:04:22,029 --> 00:04:25,160
And this is extremely important for debugging!

77
00:04:25,160 --> 00:04:29,690
One great thing about Arduinos is that you
can power them purely from your USB cable.

78
00:04:29,690 --> 00:04:30,690
But!

79
00:04:30,690 --> 00:04:34,970
If you don't want your project always attached
to a computer, you can just use an external

80
00:04:34,970 --> 00:04:38,590
9 volt DC power source with the barrel jack
over here.

81
00:04:38,590 --> 00:04:43,830
The Uno has a built in voltage regulator that
will reduce the voltage to 5 volts.

82
00:04:43,830 --> 00:04:48,460
And if you ever want to "reboot" your Arduino's
program, you've got a reset button.

83
00:04:48,460 --> 00:04:52,350
If you have time, it's worth studying the
Arduino Uno schematic.

84
00:04:52,350 --> 00:04:56,470
Don't worry if it looks complicated, you don't
need to understand most of it, I'm trying

85
00:04:56,470 --> 00:04:59,640
to get you to understand what the Arduino
designers did.

86
00:04:59,640 --> 00:05:03,930
They took an off the shelf microcontroller
that requires a lot of extra parts to get

87
00:05:03,930 --> 00:05:08,350
working, and they put all of those things
together in an easy to use way.

88
00:05:08,350 --> 00:05:13,099
And if you choose to learn more about electronics,
you can create circuit boards like this too.

89
00:05:13,099 --> 00:05:15,490
Okay, so that's what's under the hood.

90
00:05:15,490 --> 00:05:18,250
Next let's talk about the pin connectors.

91
00:05:18,250 --> 00:05:20,419
Over here you have the power pins.

92
00:05:20,419 --> 00:05:25,000
If you want, you can connect wires here to
power other circuitry with 5 volts or 3.3

93
00:05:25,000 --> 00:05:26,000
volts.

94
00:05:26,000 --> 00:05:29,470
Just make sure you whatever you power doesn't
draw more than a few milliamps!

95
00:05:29,470 --> 00:05:33,139
A few LEDs is okay, but a large motor would
be an Ardui-nono.

96
00:05:33,139 --> 00:05:34,139
(Boo!

97
00:05:34,139 --> 00:05:35,320
You suck!)

98
00:05:35,320 --> 00:05:40,509
TX and RX is for sending and receiving serial
data.

99
00:05:40,509 --> 00:05:45,349
You could use this port to send and receive
data from a GPS module, bluetooth modules,

100
00:05:45,349 --> 00:05:47,639
wifi modules and more.

101
00:05:47,639 --> 00:05:50,720
Pins 2 to 13 are for digital inputs and outputs.

102
00:05:50,720 --> 00:05:56,190
Normally when people think of binary you think
of just spitting out 0s and 1s.

103
00:05:56,190 --> 00:05:57,190
But!

104
00:05:57,190 --> 00:06:01,960
With most microcontroller pins you can actually
activate a third state, and use them as a

105
00:06:01,960 --> 00:06:03,530
digital input.

106
00:06:03,530 --> 00:06:09,370
So you can use this pin as an output where
it spits out 5V for a digital 1, or 0V for

107
00:06:09,370 --> 00:06:10,690
a digital 0.

108
00:06:10,690 --> 00:06:16,240
Or, you can internally configure the Arduino
to expect a voltage on the pin, and that voltage

109
00:06:16,240 --> 00:06:19,520
could be interpreted as a 1 or a 0.

110
00:06:19,520 --> 00:06:24,129
It's a system called tristate logic, and it's
worth reading up on, but Arduino makes it

111
00:06:24,129 --> 00:06:29,039
really easy to change between inputs and outputs
in software.

112
00:06:29,039 --> 00:06:34,590
Here we have 6 analog input pins, and these
are used to measure continuous voltages anywhere

113
00:06:34,590 --> 00:06:36,620
from 0 to 5V.

114
00:06:36,620 --> 00:06:39,730
I'll talk more about this later in the video.

115
00:06:39,730 --> 00:06:44,229
Finally some of the pins have a tilde in front
of them, and this means that you can use them

116
00:06:44,229 --> 00:06:50,090
to output pulse width modulated square waves,
which I will also show later in the video.

117
00:06:50,090 --> 00:06:51,960
Okay enough about the hardware.

118
00:06:51,960 --> 00:06:56,010
Most of the work you do with your Arduino
will actually be in the software.

119
00:06:56,010 --> 00:07:01,039
So start out by downloading the Arduino software
from arduino.cc.

120
00:07:01,039 --> 00:07:05,039
During the installation you can expect a lot
of prompts like this to show up, where you

121
00:07:05,039 --> 00:07:07,780
are asked if you want to install various drivers.

122
00:07:07,780 --> 00:07:09,669
Just say yes to everything.

123
00:07:09,669 --> 00:07:13,699
Once you are done, connect the Arduino to
your computer with a USB cable.

124
00:07:13,699 --> 00:07:17,509
Next, start up the Arduino development environment.

125
00:07:17,509 --> 00:07:21,379
The first thing you want to do is make sure
that the software tries to connect to the

126
00:07:21,379 --> 00:07:23,259
right type of Arduino.

127
00:07:23,259 --> 00:07:28,010
Go to Tools, Boards, and we are going to be
using an Arduino Uno.

128
00:07:28,010 --> 00:07:32,900
Next we have to make sure the Arduino environment
can actually connect and communicate with

129
00:07:32,900 --> 00:07:34,210
your Arduino.

130
00:07:34,210 --> 00:07:39,889
Go to Tools, Ports, and select the COM or
serial port where your Arduino is connected.

131
00:07:39,889 --> 00:07:44,090
If there isn't an Arduino listed here, you
may have a problem with your drivers, or you

132
00:07:44,090 --> 00:07:47,830
can try plugging your Arduino into a different
USB port.

133
00:07:47,830 --> 00:07:53,550
The Arduino software has a ton of fantastic,
easy to follow demo programs, and studying

134
00:07:53,550 --> 00:07:56,810
these is the best place to start learning
how to code.

135
00:07:56,810 --> 00:08:00,949
Arduino calls them "sketches" which is just
a fancy name for a program that you upload

136
00:08:00,949 --> 00:08:02,569
to your Arduino.

137
00:08:02,569 --> 00:08:07,289
Let's start with an example where we measure
voltages that are being fed into the Arduino.

138
00:08:07,289 --> 00:08:12,139
Go to File, Examples, Basics, AnalogReadSerial.

139
00:08:12,139 --> 00:08:16,599
All the Arduino examples contain instructions
on how to set up the hardware.

140
00:08:16,599 --> 00:08:21,871
This one is telling us "Attach the center
pin of a potentiometer to pin A0, and the

141
00:08:21,871 --> 00:08:24,420
outside pins to +5V and ground."

142
00:08:24,420 --> 00:08:26,340
Okay... let's do that!

143
00:08:26,340 --> 00:08:30,070
A 1k or a 10k potentiometer will work great
for this.

144
00:08:30,070 --> 00:08:35,659
We are going to be using it as a voltage divider
to create a voltage anywhere from 0 to 5 volts.

145
00:08:35,659 --> 00:08:39,429
Make sure you've watched my voltage divider
tutorial if you don't understand how that

146
00:08:39,429 --> 00:08:41,199
works.

147
00:08:41,200 --> 00:08:45,800
Every Arduino program will have two main areas,
the setup and the loop.

148
00:08:45,800 --> 00:08:50,350
The setup area is where you configure your
Arduino to do certain things for the duration

149
00:08:50,350 --> 00:08:51,680
of your program.

150
00:08:51,680 --> 00:08:56,000
It could be information on which pins are
inputs, and which are outputs, but in this

151
00:08:56,000 --> 00:09:01,750
case we are telling it to send serial data
to our computer at 9600 bits per second, which

152
00:09:01,750 --> 00:09:05,220
is a pretty standard data rate for these situations.

153
00:09:05,220 --> 00:09:09,990
The loop is the area of code that repeats
over and over again for as long as the Arduino

154
00:09:09,990 --> 00:09:11,640
has power to it.

155
00:09:11,640 --> 00:09:16,600
This line will measure the voltage on pin
A0, and store the value of it in a temporary

156
00:09:16,600 --> 00:09:19,930
place in memory that we are calling sensorValue.

157
00:09:19,930 --> 00:09:24,370
sensorValue is an int, or integer, meaning
it is a whole number.

158
00:09:24,370 --> 00:09:29,839
Once we have copied the analog voltage reading
to sensorValue, the command Serial.println

159
00:09:29,839 --> 00:09:35,070
will transmit that value from our Arduino,
through the USB cable, to our computer, and

160
00:09:35,070 --> 00:09:37,120
we can view it.

161
00:09:37,120 --> 00:09:42,760
Click Upload, it will compile the sketch and
upload it to your Arduino.

162
00:09:42,760 --> 00:09:44,740
Hit the reset button.

163
00:09:44,740 --> 00:09:47,640
Now go to Tools, Serial Monitor.

164
00:09:47,640 --> 00:09:50,490
You should see a bunch of numbers flying by.

165
00:09:50,490 --> 00:09:55,910
As you vary the potentiometer from 0 to 5
volts, you should see a number on screen from

166
00:09:55,910 --> 00:09:58,180
0 to 1023.

167
00:09:58,180 --> 00:10:03,260
This is because internally, the Arduino represents
the analog voltages it measures with a 10

168
00:10:03,260 --> 00:10:07,350
bit number which can be from 0 to 1023.

169
00:10:07,350 --> 00:10:14,440
The number scales linearly with the voltage,
so 2.5 volts would be halfway down at 512.

170
00:10:14,440 --> 00:10:19,060
You can use these formulas to convert from
analog tick values to real world voltages,

171
00:10:19,060 --> 00:10:21,220
and vice versa.

172
00:10:21,220 --> 00:10:25,510
Now close the serial monitor, and go to Tools,
Serial plotter.

173
00:10:25,510 --> 00:10:29,980
Now you can get a graph of the voltage your
potentiometer is creating over time.

174
00:10:29,980 --> 00:10:38,360
It's basically a very simple, low bandwidth
oscilloscope!

175
00:10:38,360 --> 00:10:42,320
Let's try another experiment where we build
a simple LED dimmer.

176
00:10:42,320 --> 00:10:47,070
Go to File, Examples, Analog, AnalogInOutSerial.

177
00:10:47,070 --> 00:10:50,630
The instructions for the potentiometer are
the same as before.

178
00:10:50,630 --> 00:10:55,350
It also says to connect an LED from digital
pin 9, to ground.

179
00:10:55,350 --> 00:10:59,880
Note that it is implied that you will put
a resistor in series with the LED!

180
00:10:59,880 --> 00:11:02,880
The pins on an Arduino cannot supply much
current.

181
00:11:02,880 --> 00:11:07,140
Any more than about 20mA and you risk permanently
destroying that pin.

182
00:11:07,140 --> 00:11:12,690
I have detailed tutorials on LEDs and resistor
values, but for now let's just use a 1k resistor

183
00:11:12,690 --> 00:11:14,130
attached to ground.

184
00:11:14,130 --> 00:11:20,080
The other side goes to the cathode of an LED,
and the LED's anode goes to pin 9.

185
00:11:20,080 --> 00:11:26,269
We've already talked about what an int is,
but this const int means that the label analogOutPin

186
00:11:26,269 --> 00:11:30,490
will always translate to the number 9 throughout
the rest of the program.

187
00:11:30,490 --> 00:11:36,340
For example here, saying analogWrite(9, outputvalue)
wouldn't be very clear.

188
00:11:36,340 --> 00:11:39,000
Like... what the hell is the 9 for?

189
00:11:39,000 --> 00:11:43,510
Instead we are declaring analogOutPin to be
a place in the Arduino's memory that always

190
00:11:43,510 --> 00:11:49,640
stores the constant, fixed number 9, so when
we write other pieces of code we don't have

191
00:11:49,640 --> 00:11:53,269
to memorize which pin numbers we are using
for different things.

192
00:11:53,269 --> 00:11:57,420
It's not a big deal right now but this becomes
more important when have programs that use

193
00:11:57,420 --> 00:11:59,720
a lot of different pins.

194
00:11:59,720 --> 00:12:04,709
sensorValue and outputValue are non-constant
integer numbers, which means they can change

195
00:12:04,709 --> 00:12:07,490
value during the operation of the program.

196
00:12:07,490 --> 00:12:10,750
The term for this in programming is a "variable".

197
00:12:10,750 --> 00:12:18,250
On the Arduino platform, an int variable can
hold a number anywhere between -32,768 and

198
00:12:18,250 --> 00:12:21,420
+32,767.

199
00:12:21,420 --> 00:12:26,440
The setup is the same as before, and once
again we are using the analogRead function

200
00:12:26,440 --> 00:12:31,060
to measure the voltage on a certain pin, which
turns out to be pin A0.

201
00:12:31,060 --> 00:12:34,709
We store that value in sensorValue.

202
00:12:34,709 --> 00:12:42,150
Now we know that the Arduino internally represents
analog voltages with numbers from 0 to 1023,

203
00:12:42,150 --> 00:12:47,200
but the analogWrite function only accepts
values from 0 to 255.

204
00:12:47,200 --> 00:12:52,980
So we use the map function here to linearly
scale sensorValue down to values between 0

205
00:12:52,980 --> 00:12:54,949
and 255.

206
00:12:54,949 --> 00:12:59,910
Then the analogWrite function takes the number
stored in outputValue and uses it to control

207
00:12:59,910 --> 00:13:04,870
the voltage on analogOutPin, which is in fact
pin number 9.

208
00:13:04,870 --> 00:13:09,290
The serial printing stuff is similar to what
we had before, and at the end of each loop

209
00:13:09,290 --> 00:13:14,090
the delay function will make the Arduino pause
execution of all code for a specific number

210
00:13:14,090 --> 00:13:16,089
of milliseconds.

211
00:13:16,089 --> 00:13:20,839
Once again we click upload, hit reset on the
Arduino, and now we have a system that can

212
00:13:20,839 --> 00:13:28,339
control the brightness of an LED with a potentiometer!

213
00:13:28,339 --> 00:13:30,880
Now you are probably thinking... so what?

214
00:13:30,880 --> 00:13:32,620
You can do that without the Arduino!

215
00:13:32,620 --> 00:13:37,639
Well, let's probe the output of pin 9 with
an oscilloscope to see what's really happening

216
00:13:37,639 --> 00:13:38,639
here.

217
00:13:38,639 --> 00:13:41,240
We've got a pulse width modulated square wave!

218
00:13:41,240 --> 00:13:45,440
We can control it with the potentiometer,
and it's very precise.

219
00:13:45,440 --> 00:13:49,660
Now, instead of an LED, let's control something
else.

220
00:13:49,660 --> 00:13:54,181
Let's take this part of the circuit from my
classic pulse width modulation tutorial, and

221
00:13:54,181 --> 00:14:07,920
now we will be able to control a motor digitally,
instead of a sometimes glitchy 555 circuit.

222
00:14:07,920 --> 00:14:12,690
So you might be thinking that it's weird that
an Arduino function called analogWrite is

223
00:14:12,690 --> 00:14:15,970
in fact controlling a pulse width modulated
square wave.

224
00:14:15,970 --> 00:14:21,279
Well, the idea is that you would use an RC
low pass filter to convert that square wave

225
00:14:21,279 --> 00:14:27,820
into a continuous analog voltage, and I have
separate tutorials on how to do this.

226
00:14:27,820 --> 00:14:31,910
Once you have looked at a few examples and
understand how they work, you can delete pieces

227
00:14:31,910 --> 00:14:36,710
of code, and modify existing pieces of code
to create whatever you want.

228
00:14:36,710 --> 00:14:40,940
Here I've gotten rid of the potentiometer
control and serial stuff, and I created a

229
00:14:40,940 --> 00:14:46,880
loop that turns a motor off for 1 second,
turns the motor on at 50% speed for one second,

230
00:14:46,880 --> 00:14:56,110
then it goes full speed for 1 second.

231
00:14:56,110 --> 00:15:00,940
So you can see how by reading voltages from
sensors, and writing code to control motors

232
00:15:00,940 --> 00:15:05,279
and servos, an Arduino can easily become the
brains of a simple robot.

233
00:15:05,279 --> 00:15:11,720
In fact, you can get kits to build Arduino
based robots for as little as $74.

234
00:15:11,720 --> 00:15:16,290
So those were two easy examples of what you
can do with an Arduino, but you can do SO

235
00:15:16,290 --> 00:15:20,070
much more, and there are tutorials all over
the internet for them.

236
00:15:20,070 --> 00:15:24,780
Thank you for watching, and if you found this
video useful, please check out my sponsor

237
00:15:24,780 --> 00:15:25,780
Audible.

238
00:15:25,780 --> 00:15:30,320
Audible is a company owned by Amazon and basically
they have a huge selection of audiobooks that

239
00:15:30,320 --> 00:15:34,420
you can buy and listen to on the way to work
or when you're at the gym.

240
00:15:34,420 --> 00:15:38,019
They've got a promotion right now where you
can get a free audiobook if you sign up for

241
00:15:38,019 --> 00:15:44,610
their free 30 day trial by visiting audible.com/afrotechmods
Once you're there, you can log in with your

242
00:15:44,610 --> 00:15:46,440
existing Amazon account.

243
00:15:46,440 --> 00:15:49,949
You need to give them a credit card number
but you can cancel your free trial at any

244
00:15:49,949 --> 00:15:52,970
time, and you still get to keep the free audiobook.

245
00:15:52,970 --> 00:15:58,130
I personally like Ryan Holiday - he's got
this amazing book called Trust Me, I'm Lying:

246
00:15:58,130 --> 00:16:00,190
Confessions of a Media Manipulator.

247
00:16:00,190 --> 00:16:05,009
He's got these crazy stories about how anyone
can pose as a fake "expert" and get quoted

248
00:16:05,009 --> 00:16:06,889
in news articles.

249
00:16:06,889 --> 00:16:10,920
Once you pick out your free audiobook, you
download the Audible app on your phone or

250
00:16:10,920 --> 00:16:25,060
tablet, and you can access your audiobooks
from anywhere.

251
00:16:25,060 --> 00:16:28,680
If that sounds interesting to you, click on
the link in the video description section

252
00:16:28,680 --> 00:00:00,000
or visit audible.com/afrotechmods to start
your free trial!

